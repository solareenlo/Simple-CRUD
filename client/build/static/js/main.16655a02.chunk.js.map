{"version":3,"sources":["actions.js","components/AddForm.js","components/CharacterList.js","components/App.js","reducers.js","index.js"],"names":["receiveDataSuccess","characterArray","type","AddForm","_ref","store","_store$getState$form","getState","form","name","age","react_default","a","createElement","onSubmit","e","preventDefault","dispatch","axios","post","then","response","data","catch","err","console","error","Error","handleSubmit","value","onChange","target","CharacterList","_store$getState$chara","characters","isFetching","onClick","get","_characterArray","map","character","key","_id","concat","id","put","method","url","App","components_AddForm","this","props","components_CharacterList","Component","initialState","rootReducer","combineReducers","state","arguments","length","undefined","action","Object","objectSpread","createStore","render","ReactDOM","components_App","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.16655a02.chunk.js","sourcesContent":["// 文字列定数\nexport const CHANGE_NAME     = 'CHANGE_NAME'\nexport const CHANGE_AGE      = 'CHANGE_AGE'\nexport const INITIALIZE_FORM = 'INITIALIZE_FORM'\nexport const REQUEST_DATA         = 'REQUEST_DATA'\nexport const RECEIVE_DATA_SUCCESS = 'RECEIVE_DATA_SUCCESS'\nexport const RECEIVE_DATA_FAILED  = 'RECEIVE_DATA_FAILED'\n\n// action creaters\nexport const changeName = name => ({\n  type: CHANGE_NAME,\n  name,\n})\nexport const changeAge = age => ({\n  type: CHANGE_AGE,\n  age,\n})\nexport const initializeForm = () => ({\n  type: INITIALIZE_FORM,\n})\nexport const requestData = () => ({\n  type: REQUEST_DATA,\n})\nexport const receiveDataSuccess = characterArray => ({\n  type: RECEIVE_DATA_SUCCESS,\n  characterArray,\n})\nexport const receiveDataFailed = () => ({\n  type: RECEIVE_DATA_FAILED,\n})\n","import React from 'react'\nimport axios from 'axios'\nimport { changeName,\n         changeAge,\n         initializeForm,\n         requestData,\n         receiveDataSuccess,\n         receiveDataFailed\n} from '../actions'\n\nconst AddForm = ({ store }) => {\n  const { name, age } = store.getState().form  // storeからフォームの内容を取得\n\n  const handleSubmit = e => {\n    e.preventDefault()    // フォームsubmit時のデフォルトの動作を抑制\n\n    store.dispatch(requestData())\n    axios.post('/api/characters', {\n      name,\n      age,\n    })  // キャラクターの名前、年齢からなるオブジェクトをサーバーにPOST\n    .then(response => {\n      // console.log(response)  // 後で行う動作確認のためのコンソール出力\n      store.dispatch(initializeForm())  // submit後はフォームを初期化\n      const characterArray = response.data\n      store.dispatch(receiveDataSuccess(characterArray))\n    })\n    .catch(err => {\n      console.error(new Error(err))\n      store.dispatch(receiveDataFailed())\n    })\n  }\n\n  return (\n    <div>\n      <form onSubmit={e => handleSubmit(e)}>\n        <label>\n          名前:\n          <input value={name} onChange={e => store.dispatch(changeName(e.target.value))} />\n        </label>\n        <label>\n          年齢:\n          <input value={age} onChange={e => store.dispatch(changeAge(e.target.value))} />\n        </label>\n        <button type=\"submit\">submit</button>\n      </form>\n    </div>\n  )\n}\n\nexport default AddForm\n","import React from 'react'\nimport axios from 'axios'\nimport { requestData,\n         receiveDataSuccess,\n         receiveDataFailed\n} from '../actions'\n\nconst CharacterList = ({ store }) => {\n  const { isFetching, characterArray } = store.getState().characters\n\n  const handleFetchData = () => {\n    store.dispatch(requestData())  // axios.get()を呼ぶ前にisFetchingをtrueにしておく\n    axios.get('/api/characters')\n    .then(response => {  // データ受け取りに成功した場合\n      const _characterArray = response.data\n      store.dispatch(receiveDataSuccess(_characterArray))    // データをstoreに保存するとともにisFetchingをfalseに\n    })\n    .catch(err => {  // データ受け取りに失敗した場合\n      console.error(new Error(err))\n      store.dispatch(receiveDataFailed())  // isFetchingをfalseに\n    })\n  }\n\n  const handleUpdateCharacter = id => {\n    store.dispatch(requestData())\n    axios.put('/api/characters', {\n      id,\n    })\n    .then(response => {\n      const _characterArray = response.data\n      store.dispatch(receiveDataSuccess(_characterArray))\n    })\n    .catch(err => {\n      console.error(new Error(err))\n      store.dispatch(receiveDataFailed())\n    })\n  }\n\n  const handleDeleteCharacter = id => {\n    store.dispatch(requestData())\n    // 気持ちとしては、axios.delete('/api/characters', { id })\n    axios({\n      method: 'delete',\n      url: '/api/characters',\n      data: {\n        id,\n      }\n    })\n    .then(response => {\n      const _characterArray = response.data\n      store.dispatch(receiveDataSuccess(_characterArray))\n    })\n    .catch(err => {\n      console.error(new Error(err))\n      store.dispatch(receiveDataFailed())\n    })\n  }\n\n  return (\n    <div>\n      {\n        isFetching  // isFetchingの値で分岐\n          ? <h2>Now Loading...</h2>  // データをFetch中ならばローディングアイコンを表示\n          : <div>\n              <button onClick={() => handleFetchData()}>fetch data</button>\n              <ul>\n                {characterArray.map(character => (\n                  <li key={character._id}>\n                    {`${character.name} (${character.age})`}\n                    <button onClick={() => handleUpdateCharacter(character._id)}>+1</button>\n                    <button onClick={() => handleDeleteCharacter(character._id)}>delete</button>\n                  </li>\n                ))}\n              </ul>\n            </div>\n      }\n    </div>\n  )\n}\n\nexport default CharacterList\n","import React, { Component } from 'react';\nimport AddForm from './AddForm'\nimport CharacterList from './CharacterList'\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <AddForm store={this.props.store} />\n        <CharacterList store={this.props.store} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { combineReducers } from 'redux'\nimport { CHANGE_NAME,\n         CHANGE_AGE,\n         INITIALIZE_FORM,\n         REQUEST_DATA,\n         RECEIVE_DATA_SUCCESS,\n         RECEIVE_DATA_FAILED\n} from './actions'\n\nconst initialState = {\n  form: {  // AddFormに入力されている文字列\n    name: '',\n    age: '',\n  },\n  characters: {\n    isFetching: false,  // サーバーからキャラクターのリストを取ってきている最中かどうか\n    characterArray: [],  // キャラクターのデータを入れるArray\n  },\n}\n\nconst formReducer = (state = initialState.form, action) => {\n  switch (action.type) {\n    case CHANGE_NAME:\n      return {\n        ...state,\n        name: action.name,\n      }\n    case CHANGE_AGE:\n      return {\n        ...state,\n        age: action.age,\n      }\n    case INITIALIZE_FORM:\n      return initialState.form\n    default:\n      return state\n  }\n}\n\nconst charactersReducer = (state = initialState.characters, action) => {\n  switch (action.type) {\n    case REQUEST_DATA:\n      return {\n        ...state,\n        isFetching: true,\n      }\n    case RECEIVE_DATA_SUCCESS:\n      return {\n        ...state,\n        isFetching: false,\n        characterArray: action.characterArray,\n      }\n    case RECEIVE_DATA_FAILED:\n      return {\n        ...state,\n        isFetching: false,\n      }\n    default:\n      return state\n  }\n}\n\nconst rootReducer = combineReducers({\n  form: formReducer,\n  characters: charactersReducer,\n})\n\nexport default rootReducer\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux'\nimport App from './components/App'\nimport rootReducer from './reducers'\n\nconst store = createStore(rootReducer)\n\nconst render = () => {\n  ReactDOM.render(\n    <App store={store} />,\n    document.getElementById('root')\n  )\n}\n\nstore.subscribe(() => {\n  render()\n  // console.log(store.getState().form)   // 動作確認のためコンソール出力\n})\nrender()\n"],"sourceRoot":""}